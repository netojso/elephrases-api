definitions:
  domain.CardState:
    enum:
    - new
    - learning
    - review
    - lapsed
    type: string
    x-enum-varnames:
    - New
    - Learning
    - Review
    - Lapsed
  domain.Deck:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      flashcards:
        items:
          $ref: '#/definitions/domain.Flashcard'
        type: array
      id:
        type: string
      name:
        type: string
      visibility:
        type: string
    type: object
  domain.Flashcard:
    properties:
      back:
        type: string
      created_at:
        type: string
      deck_id:
        type: string
      ease_factor:
        type: number
      front:
        type: string
      id:
        type: string
      interval:
        type: integer
      last_review_at:
        type: integer
      next_review_at:
        type: integer
      state:
        $ref: '#/definitions/domain.CardState'
    type: object
  domain.User:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      phone_number:
        type: string
    type: object
  dto.AuthResponseDTO:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.CreateDeckDTO:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      visibility:
        type: string
    type: object
  dto.CreateFlashcardDTO:
    properties:
      back:
        type: string
      deck_id:
        type: string
      front:
        type: string
    required:
    - back
    - deck_id
    - front
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.ReviewFlashcardDTO:
    properties:
      flashcard_id:
        type: string
      response:
        type: string
    required:
    - flashcard_id
    - response
    type: object
  dto.UpdateUserDTO:
    properties:
      full_name:
        type: string
      phone_number:
        type: string
    type: object
  pkg.ErrorResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: This is the Elephrases API documentation.
  title: Elephrases API
  version: "1"
paths:
  /decks:
    get:
      description: Get all decks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Deck'
            type: array
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all decks
      tags:
      - Decks
    post:
      consumes:
      - application/json
      description: Create a new deck
      parameters:
      - description: Create Deck DTO
        in: body
        name: deck
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDeckDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new deck
      tags:
      - Decks
  /decks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a deck
      parameters:
      - description: Deck ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a deck
      tags:
      - Decks
    get:
      consumes:
      - application/json
      description: Get a deck by ID
      parameters:
      - description: Deck ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Deck'
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a deck by ID
      tags:
      - Decks
    put:
      consumes:
      - application/json
      description: Update a deck
      parameters:
      - description: Deck ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Deck
        in: body
        name: deck
        required: true
        schema:
          $ref: '#/definitions/domain.Deck'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Deck'
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a deck
      tags:
      - Decks
  /flashcards:
    get:
      description: Get all flashcards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Flashcard'
            type: array
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all flashcards
      tags:
      - Flashcards
    post:
      consumes:
      - application/json
      description: Create a new flashcard with the provided details
      parameters:
      - description: Create Flashcard
        in: body
        name: flashcard
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFlashcardDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Flashcard'
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new flashcard
      tags:
      - Flashcards
  /flashcards/{id}:
    delete:
      description: Delete a flashcard by its ID
      parameters:
      - description: Flashcard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a flashcard
      tags:
      - Flashcards
    get:
      description: Get a flashcard by its ID
      parameters:
      - description: Flashcard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Flashcard'
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a flashcard by ID
      tags:
      - Flashcards
    put:
      consumes:
      - application/json
      description: Update a flashcard by its ID
      parameters:
      - description: Flashcard ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Flashcard
        in: body
        name: flashcard
        required: true
        schema:
          $ref: '#/definitions/domain.Flashcard'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Flashcard'
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a flashcard
      tags:
      - Flashcards
  /flashcards/due:
    get:
      description: Get all due flashcards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Flashcard'
            type: array
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get due flashcards
      tags:
      - Flashcards
  /flashcards/review:
    post:
      consumes:
      - application/json
      description: Review a flashcard by providing the flashcard ID and response
      parameters:
      - description: Review Flashcard
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/dto.ReviewFlashcardDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Review a flashcard
      tags:
      - Flashcards
  /login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponseDTO'
      summary: Login a user
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Registration details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponseDTO'
      summary: Register a new user
      tags:
      - Authentication
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Fetch all users
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Get a user by email
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - Users
produces:
- application/json
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
